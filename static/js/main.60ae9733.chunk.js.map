{"version":3,"sources":["components/Webcam.js","App.js","serviceWorker.js","index.js"],"names":["Webcam","state","videoSrc","labelSrc","console","log","navigator","mediaDevices","getUserMedia","video","facingMode","streamFunc","this","setState","document","getElementById","srcObject","canvas","height","width","getContext","drawImage","stream","window","URL","createObjectURL","getElementsByClassName","play","className","id","autoPlay","playsInline","onClick","getWebcam","bind","getFrontWebcam","takePicture","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8QAkFeA,G,kNA7EXC,MAAQ,CAACC,SAAW,KAAMC,SAAW,c,mLAOjCC,QAAQC,IAAI,2B,SACSC,UAAUC,aAAaC,aAAa,CAACC,MAAM,CAACC,WAAW,iB,OAAxEC,E,OACJP,QAAQC,IAAIM,GAEZC,KAAKC,SAAS,CAACX,SAAWS,IAC1BP,QAAQC,IAAIO,KAAKX,MAAMC,UAEnBO,EAAMK,SAASC,eAAe,mBAClCX,QAAQC,IAAI,wBACZI,EAAMO,UAAUL,EAEhBC,KAAKC,SAAS,CAACV,SAAS,iB,uQAKxBC,QAAQC,IAAI,2B,SACSC,UAAUC,aAAaC,aAAa,CAACC,MAAM,CAACC,WAAW,U,OAAxEC,E,OACJP,QAAQC,IAAIM,GAEZC,KAAKC,SAAS,CAACX,SAAWS,IAC1BP,QAAQC,IAAIO,KAAKX,MAAMC,UAEnBO,EAAMK,SAASC,eAAe,mBAClCX,QAAQC,IAAI,wBACZI,EAAMO,UAAUL,EAEhBC,KAAKC,SAAS,CAACV,SAAS,iB,2IAIxBC,QAAQC,IAAI,oBACZ,IAAII,EAAMK,SAASC,eAAe,mBAC9BE,EAAOH,SAASC,eAAe,UACnCE,EAAOC,OAAO,MACdD,EAAOE,MAAM,MACAF,EAAOG,WAAW,MACvBC,UAAUZ,EAAM,EAAE,EAAE,MAAM,S,2EAIpBa,G,8EACdV,KAAKC,SAAS,CAACX,SAAUqB,OAAOC,IAAIC,gBAAgBH,KAC9Cb,EAAMK,SAASY,uBAAuB,mBAC5CtB,QAAQC,IAAI,yB,SACNI,EAAMkB,O,OACZvB,QAAQC,IAAI,e,sIAIZ,OAAO,yBAAKuB,UAAU,kBAClB,yBAAKA,UAAU,iBAAiBC,GAAI,kBAChC,yBAAKD,UAAU,YACX,0CACA,0BAAMA,UAAU,eAAehB,KAAKX,MAAME,WAE9C,2BAAO0B,GAAG,kBAAkBD,UAAU,kBAAkBE,UAAU,EAAMX,MAAM,QAAQD,OAAO,MAAMa,aAAa,IAChH,yBAAKH,UAAU,aACX,4BAAQI,QAASpB,KAAKqB,UAAUC,KAAKtB,OAArC,oBACA,4BAAQoB,QAASpB,KAAKuB,eAAeD,KAAKtB,OAA1C,iBACA,4BAAQoB,QAASpB,KAAKwB,aAAtB,yBAGJ,4BAAQP,GAAG,iB,GAxENQ,IAAMC,YCgCZC,E,uKA3BX,OAAO,6BACL,kBAAC,EAAD,W,GAHYF,IAAMC,WCMJE,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,SDuHpB,kBAAmBT,WACrBA,UAAUyC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.60ae9733.chunk.js","sourcesContent":["import React from 'react'\nimport './Webcam.css'\n\nclass Webcam extends React.Component{\n\n    state = {videoSrc : null, labelSrc : \"On Waiting\"}\n    \n    \n    \n\n    async getWebcam(){\n        \n        console.log(\"Empezando a ver la cosa\");\n        let streamFunc=await navigator.mediaDevices.getUserMedia({video:{facingMode:\"environment\"}})\n        console.log(streamFunc);\n        // this.state.videoSrc=streamFunc\n        this.setState({videoSrc : streamFunc})\n        console.log(this.state.videoSrc);\n        // console.log(this.state.videoSrc);\n        let video=document.getElementById(\"StreamContainer\")\n        console.log(\"Ya cargado el stream\");\n        video.srcObject=streamFunc\n\n        this.setState({labelSrc:\"On Streaming\"})\n\n    }\n    async getFrontWebcam(){\n        \n        console.log(\"Empezando a ver la cosa\");\n        let streamFunc=await navigator.mediaDevices.getUserMedia({video:{facingMode:\"user\"}})\n        console.log(streamFunc);\n        // this.state.videoSrc=streamFunc\n        this.setState({videoSrc : streamFunc})\n        console.log(this.state.videoSrc);\n        // console.log(this.state.videoSrc);\n        let video=document.getElementById(\"StreamContainer\")\n        console.log(\"Ya cargado el stream\");\n        video.srcObject=streamFunc\n\n        this.setState({labelSrc:\"On Streaming\"})\n\n    }\n    takePicture(){\n        console.log(\"Taking a Picture\")\n        let video=document.getElementById(\"StreamContainer\")\n        let canvas=document.getElementById(\"Canvas\")\n        canvas.height=\"510\"\n        canvas.width=\"680\"\n        let context= canvas.getContext('2d')\n        context.drawImage(video,0,0,\"680\",\"510\")\n        \n    }\n\n    async handleVideo(stream){\n        this.setState({videoSrc: window.URL.createObjectURL(stream)})\n        const video=document.getElementsByClassName(\"StreamContainer\")\n        console.log(\"Starting to Get video\");\n        await video.play()\n        console.log(\"Now Playing\")\n\n    }\n    render(){\n        return <div className=\"VideoContainer\">\n            <div className=\"VideoContainer\" id =\"VideoContainer\">\n                <div className=\"modelOut\">\n                    <span>Status: </span>\n                    <span className=\"VideoStatus\">{this.state.labelSrc}</span>\n                </div>\n                <video id=\"StreamContainer\" className=\"StreamContainer\" autoPlay={true} width=\"680px\" height=\"510\" playsInline={true}></video>\n                <div className=\"ButtonDiv\">\n                    <button onClick={this.getWebcam.bind(this)}>Click for Stream</button>\n                    <button onClick={this.getFrontWebcam.bind(this)}>Change Camera</button>\n                    <button onClick={this.takePicture}>Click for take a Pic</button>\n                </div>\n                \n                <canvas id=\"Canvas\"></canvas>\n            </div>\n            \n\n        </div>\n    }\n}\nexport default Webcam;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Webcam from './components/Webcam'\n//import MyComp from './components/MyComp'\n\nclass App extends React.Component{\n  render(){\n    return <div>\n      <Webcam/>\n    </div>\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import Webcam from './components/Webcam'\n//import Webcam from 'react-webcam'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}